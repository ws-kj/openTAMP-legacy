; AUTOGENERATED. DO NOT EDIT.

(define (domain robotics)                  
(:requirements :strips :equality :typing)
(:types
Robot Room Wall Door Location Obstacle DomainSettings Target Vantage - base_object)

(:predicates
(DoorConnectsLocs ?var0 - Door ?var1 - Location ?var2 - Location )
(RobotInRoom ?var0 - Robot ?var1 - Room )
(LocationInRoom ?var0 - Location ?var1 - Room )
(TargetInRoom ?var0 - Target ?var1 - Room )
(RobotAtLocation ?var0 - Robot ?var1 - Location )
(RobotLookingDistance ?var0 - Robot ?var1 - Target )
(RobotAtTarget ?var0 - Robot ?var1 - Target )
(RobotNearTarget ?var0 - Robot ?var1 - Target )
(RobotNearVantage ?var0 - Robot ?var1 - Vantage )
(CertainPosition ?var0 - Target )
(BAvoidObs ?var0 - Robot ?var1 - Obstacle )
(IsMP ?var0 - Robot )
(PointingAtTargetDotProd ?var0 - Robot ?var1 - Target )
(IsStationary ?var0 - Robot )
(StationaryPoint ?var0 - Robot )
(StationaryBase ?var0 - Robot )
(IsCentral ?var0 - Robot )
(TaskComplete ?var0 - Robot )
(MovedToLoc ?var0 - Robot )
(FacedLoc ?var0 - Robot )
)

(:action move_near_loc_and_observe
:parameters (?robot - Robot ?targ1 - Target ?room1 - Room)       
:precondition (and (RobotInRoom ?robot ?room1)(TargetInRoom ?targ1 ?room1)) 
:effect (and (RobotInRoom ?robot ?room1)(TargetInRoom ?targ1 ?room1)(IsMP ?robot)(StationaryBase ?robot)(PointingAtTargetDotProd ?robot ?targ1)(forall (?w - Obstacle) (BAvoidObs ?robot ?w))(FacedLoc ?robot))
)

(:action view_vantage
:parameters (?robot - Robot ?targ1 - Target ?room1 - Room)     
:precondition (and (RobotInRoom ?robot ?room1)(TargetInRoom ?targ1 ?room1)(MovedToLoc ?robot)) 
:effect (and (CertainPosition ?targ1)(IsStationary ?robot)(not (FacedLoc ?robot))(not (MovedToLoc ?robot)))
)

(:action zzzzz
:parameters (?robot - Robot ?targ1 - Target) 
:precondition (and (RobotAtTarget ?robot ?targ1)) 
:effect (and (TaskComplete ?robot)(IsStationary ?robot))
)

(:action approach_vantage
:parameters (?robot - Robot ?targ1 - Target ?room1 - Room ?v1 - Vantage)       
:precondition (and (TargetInRoom ?targ1 ?room1)(RobotInRoom ?robot ?room1)(FacedLoc ?robot)) 
:effect (and (RobotNearTarget ?robot ?targ1)(IsMP ?robot)(MovedToLoc ?robot)(StationaryPoint ?robot)(RobotInRoom ?robot ?room1)(forall (?w - Obstacle) (BAvoidObs ?robot ?w)))
)

(:action approach_targ
:parameters (?robot - Robot ?targ1 - Target ?room1 - Room)       
:precondition (and (CertainPosition ?targ1)(TargetInRoom ?targ1 ?room1)(RobotInRoom ?robot ?room1)) 
:effect (and (RobotAtTarget ?robot ?targ1)(IsMP ?robot)(not (MovedToLoc ?robot))(StationaryPoint ?robot)(RobotInRoom ?robot ?room1)(forall (?w - Obstacle) (BAvoidObs ?robot ?w)))
)

(:action move_to_loc_same_room
:parameters (?robot - Robot ?room - Room ?loc2 - Location)   
:precondition (and (RobotInRoom ?robot ?room)(LocationInRoom ?loc2 ?room)) 
:effect (and (RobotInRoom ?robot ?room)(RobotAtLocation ?robot ?loc2)(IsMP ?robot))
)

(:action move_through_door
:parameters (?robot - Robot ?door - Door ?room1 - Room ?room2 - Room ?loc1 - Location ?loc2 - Location)        
:precondition (and (DoorConnectsLocs ?door ?loc1 ?loc2)(RobotInRoom ?robot ?room1)(RobotAtLocation ?robot ?loc1)(LocationInRoom ?loc1 ?room1)(LocationInRoom ?loc2 ?room2)) 
:effect (and (not (RobotInRoom ?robot ?room1))(RobotInRoom ?robot ?room2)(not (RobotAtLocation ?robot ?loc1))(RobotAtLocation ?robot ?loc2)(IsMP ?robot))
)

)